// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "windows"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Hospital {
  id String @id @default(uuid())
  name String @db.VarChar(255)
  logo_path String?

  user User[]
  devices_connected DeviceConnected[]
  patient_handlers PatientHandler[]

  @@map("hospitals")
}

model User {
  id String @id @default(uuid())
  username String @unique 
  password String
  token String? 
  is_active Boolean
  
  role_id Int
  hospital_id String

  hospital Hospital @relation(fields: [hospital_id], references: [id], onDelete: Cascade)
  role Role @relation(fields: [role_id], references: [id], onDelete: Cascade)

  admin    Admin?   @relation("UserAdmin")
  doctor   Doctor?  @relation("UserDoctor")
  nurse    Nurse?   @relation("UserNurse")
   
  patient_handle PatientHandler[]
  activity_log ActivityLogs[]
  profile_picture ProfilePicture?

  @@map("users")
}

model Role {
  id Int @id @default(autoincrement())
  name String @unique
  kode String
  
  user User[]

  @@map("roles")
}

model Admin{
  name String 

  user_id String @id
  
  user   User     @relation("UserAdmin", fields: [user_id], references: [id])

  doctor Doctor[]
  nurse Nurse[]

  @@map("admins")
}

model Doctor{
  name String 

  user_id String @id @unique
  admin_id String
  
  user  User  @relation("UserDoctor", fields: [user_id], references: [id])
  admin Admin @relation(fields: [admin_id], references: [user_id])

  @@map("doctors")
}

model Nurse{
  name String 

  user_id String @id @unique
  admin_id String
  
  user  User  @relation("UserNurse", fields: [user_id], references: [id])
  admin Admin @relation(fields: [admin_id], references: [user_id])

  @@map("nurses")
}

model ProfilePicture {
  id Int @id @default(autoincrement())
  path String
  
  user_id String @unique

  user User @relation(fields: [user_id], references: [id])

  @@map("profile_pictures")
}

model DeviceConnected {
  mac String @id @unique
  name String @db.VarChar(255)
  code String @unique
  type String @db.VarChar(255)
  connection String

  label String? @db.VarChar(255)

  hospital_id String

  hospital Hospital @relation(fields: [hospital_id], references: [id])

  @@map("devices_connected")
}

model PatientHandler {
  id String @id @default(uuid())
  user_id String
  patient_id String
  hospital_id String

  user User @relation(fields: [user_id], references: [id])
  patient Patient @relation(fields: [patient_id], references: [id])
  hospital Hospital @relation(fields: [hospital_id], references: [id])

  measurement_histories MeasurementHistories[]

  @@map("patient_handlers")
}

model Patient {
  id String @id @default(uuid())
  barcode_img String @db.LongText
  name String @db.VarChar(255)
  gender String @db.VarChar(255)
  address String?
  phone String?
  work String?
  last_education String?
  place_of_birth String?
  date_of_birth String
  religion String?
  weight Int?
  age Int

  patient_handle PatientHandler[]

  @@map("patients")
}

model MeasurementHistories{
  id String @id @default(uuid())
  data Json
  timestamp DateTime @default(now())

  patient_handler_id String
  device String

  patient_handler PatientHandler @relation(fields: [patient_handler_id], references: [id])

  @@map("measurement_histories")
}

//Activity
model ActivityLogs{
  id String @id @default(uuid())
  action String
  description String @db.Text
  target_table String
  target_id String?
  ip_address String?
  user_agent String?
  timestamp DateTime @default(now())

  user_id String

  user User @relation(fields: [user_id], references: [id])

  @@map("activity_logs")
}